<!DOCTYPE html>
<html>
    <head>
        <%- include('./partials/head'); %>
        <link rel="stylesheet" href="/public/css/friends.css" />
        <link rel="stylesheet" href="/public/css/index.css" />

    </head>
    <body>

        <%- include('./partials/nav', { title: 'Friends', user: user, search: true }); %>

        <div class="fixed-action-btn" id="fab">
            <a
                class="btn-floating btn-large deep-orange"
                href="/app/friends/add"
                id="fabstyle"
            >
                <i class="large material-icons">add</i>
            </a>
        </div>
    

        <div class="container-fluid">
            <div class="row" id="search-row" hidden="true">
                <div class="input-field scale-transition">
                      <i class="material-icons prefix">search</i>
                    <input id="search-box" type="text" />
                      <label for="search-box">Search</label>
                </div>
            </div>
            <% if (locals.requests.length > 0 || locals.outgoing.length > 0) { %>
                <h5 id="requestsH">Requests:</h5>
                <ul class="collapsible requestsSection" id="requestsCollapsible">
                    <% for (const i in requests) { %>
                        <li data-requestid="<%= requests[i].username %>" class="list-item">
                            <div class="collapsible-header waves-effect waves-light"><i class="material-icons">person</i><%= requests[i].username %> <span class="new badge green" data-badge-caption="Incoming"></span></div>
                            <div class="collapsible-body">
                                <button type="button" class="btn red darken-2 waves-effect waves-light" style="width: 100%" onclick="ignore('<%= requests[i].username %>')"><i class="material-icons left">remove_circle_outline</i>Ignore</button>
                                <br />
                                <br />
                                <button type="button" class="btn green darken-2 waves-effect waves-light" style="width: 100%;" onclick="accept('<%= requests[i].username %>')"><i class="material-icons left">person_add_alt_1</i>Accept</button>
                            </div>
                        </li>
                    <% } %>
                    <% for (const i in outgoing) { %>
                        <li data-requestid="<%= outgoing[i].username %>" class="list-item">
                            <div class="collapsible-header waves-effect waves-light"><i class="material-icons">person</i><%= outgoing[i].username %> <span class="new badge red" data-badge-caption="Outgoing"></span></div>
                            <div class="collapsible-body">
                                <button type="button" class="btn deep-orange waves-effect waves-light" style="width: 100%" onclick="redirect('/app/users/<%= outgoing[i].username %>?referrer=/friends')"><i class="material-icons left">launch</i>View profile</button>
                                <br />
                                <br />
                                <button type="button" class="btn red darken-2 waves-effect waves-light" style="width: 100%;" onclick="cancelOutgoing('<%= outgoing[i].username %>')"><i class="material-icons left">remove_circle_outline</i>Cancel</button>
                            </div>
                        </li>
                    <% } %>
                </ul> 
            <% } %>
            <% if (locals.friends.length > 0 && (locals.requests.length > 0 || locals.outgoing.length > 0)) { %>
                <h5>Friends:</h5>
            <% } %>
            <% if (locals.friends.length > 0) { %>
                <ul class="collapsible">
                    <% for (const i in friends) { %>
                        <li class="list-item">
                            <div class="collapsible-header friend-item waves-effect waves-light" onclick="redirect('/app/users/<%= friends[i].username %>?referrer=/friends')"><i class="material-icons">person</i><%= friends[i].username %></div>
                        </li>
                    <% } %>
                </ul>
            <% } %>
        </div>

        <%- include('./partials/foot') %>
        <script>
            M.AutoInit();

            function openFirstRequest() {
                const reqCollapse = document.querySelector('#requestsCollapsible');
                if (reqCollapse) {
                    M.Collapsible.getInstance(reqCollapse).open(0);

                    if (0 == (reqCollapse.children.length || '')) {
                        reqCollapse.remove();
                        document.querySelector('#requestsH').remove();
                    }
                }
                
            }
            openFirstRequest();
            
            async function cancelOutgoing(outgoing) {
                const url = '/api/users/<%= user.username %>/requests/cancel';
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ request: outgoing })
                });

                const status = await response.status;
                const json = await response.json();

                console.log(status, json);

                if (status === 201) {
                    document.querySelector(`[data-requestid="${outgoing}"`).remove();
                    M.toast({ html: `Request cancelled: ${outgoing}` });
                    openFirstRequest();
                }
            }

            async function ignore(request) {
                
                const url = '/api/users/<%= user.username %>/requests/remove';
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ request })
                });

                const status = await response.status;
                const json = await response.json();

                console.log(status, json);

                if (status === 201) {
                    document.querySelector(`[data-requestid="${request}"`).remove();
                    M.toast({ html: `Request Ignored: ${request}` });
                    openFirstRequest();
                }

            }

            async function accept(request) {

                const url = '/api/users/<%= user.username %>/requests/add';
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ request })
                });

                const status = await response.status;
                const json = await response.json();

                console.log(status, json);

                if (status == 201) {
                    reload();
                } else { 
                    alert(`Error ${status}: ${json.error}`);
                }

            }

            const friends = [...document.querySelectorAll('.list-item')];
            document.querySelector('#search-box').oninput = (e) => {
                const searchTerm = document.querySelector('#search-box').value.trim().toLowerCase();

                if (searchTerm.length > 0) {
                    for (const i in friends) {
                        const username = friends[i].querySelector('.collapsible-header').textContent.trim().toLowerCase();

                        if (username.includes(searchTerm)) {
                            friends[i].removeAttribute('hidden');
                        } else {
                            friends[i].setAttribute('hidden', true);
                        }
                    }
                } else {
                    for (const i in friends) {
                        friends[i].removeAttribute('hidden');
                    }
                }
            }

            function clearSearch() {
                for (const i in friends) {
                    friends[i].removeAttribute('hidden');
                }
            }

            

        </script>
    </body>
</html>