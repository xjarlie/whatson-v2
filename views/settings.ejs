<!DOCTYPE html>
<html>

<head>
    <%- include('./partials/head'); %>
    <link rel="stylesheet" href="/public/css/settings.css" />
</head>

<body>
    <%- include('./partials/nav', { title: 'Settings' , user: user }); %>

        <div class="container">
            <div class="row">
                <div class="card">
                    <div class="card-content">
                        <button type="button" class="btn deep-orange waves-effect waves-light" style="width: 100%;"
                            onclick="requestNotificationPermission()"><i class="material-icons left">notifications_active</i>Enable notifications</button>
                    </div>
                </div>
            </div>
            <div class="card">
                <!-- <div class="row"> -->
                    <div class="switch">
                        <div class="card-content">
                            <span class="card-title" style="font-weight: 500;">
                                Dark Mode
                                <div class="right">
                                    <label>
                                        <input type="checkbox" id="darkmode" onclick="darkMode()"
                                            <%=user.darkMode? 'checked' : '' %>>
                                        <span class="lever"></span>
                                    </label>
                                </div>
                            </span>
                        </div>
                    </div>
                <!-- </div> -->
                <!-- <div class="row"> -->
                    <div class="switch">
                        <div class="card-content">
                            <span class="card-title" style="font-weight: 500;">
                                Amoled mode
                                <div class="right">
                                    <label>
                                        <input type="checkbox" id="amoled" onclick="amoled()"
                                            <%=user.experiments.amoled? 'checked' : '' %>>
                                        <span class="lever"></span>
                                    </label>
                                </div>
                            </span>
                        </div>
                    </div>
                <!-- </div> -->
            </div>
            <% if (locals.isAdmin === true) { %>
            <div class="card">
                <div class="card-content">
                    <span class="card-title">Notif Tester</span>
                    <input type="text" id="notifTest" placeholder="Enter username" />
                    <button type="button" class="btn deep-orange" onclick="notifTest()">Go</button>
                </div>
            </div> 
            <% } %>
            <div class="row">
                <div class="card">
                    <div class="card-content">
                        <div class="row">
                            <h6><i class="material-icons left">face</i>
                                <%= locals.user.displayName %>
                            </h6>
                        </div>
                        <div class="row">
                            <h6><i class="material-icons left">account_circle</i>
                                <%= locals.user.username %>
                            </h6>
                        </div>
                        <div class="row">
                            <h6><i class="material-icons left">email</i>
                                <%= locals.user.email %>
                            </h6>
                        </div>
                        <button type="button" class="btn waves-effect waves-light red darken-2" onclick="logOut()"
                            style="width: 100%;"><i class="material-icons left">logout</i>Log Out</button>
                    </div>
                </div>
            </div>
        </div>

        <%- include('./partials/foot') %>
            <script>
                M.AutoInit();

                async function darkMode() {
                    const checkbox = document.querySelector('#darkmode');
                    console.log(checkbox.checked);

                    const response = await fetch(`/api/users/darkmode`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ darkMode: checkbox.checked })
                    });
                    const status = await response.status;
                    const json = await response.json();
                    console.log(status, json);

                    if (status == 200) {
                        reload();
                    } else {
                        alert('Error: ' + json.error);
                    }
                }

                async function notifTest() {

                    const target = document.querySelector('#notifTest').value.trim().toLowerCase();

                    const url = '/api/push/notiftest';
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ target })
                    });
                    const status = response.status;
                    const json = await response.json();

                    console.log(status, json);
                    alert(status + ': ' + json);

                }

                async function exlayout() {
                    const checkbox = document.querySelector('#exlayout');

                    const response = await fetch(`/api/users/experiments/layout`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ enabled: checkbox.checked })
                    });
                    const status = await response.status;
                    const json = await response.json();
                    console.log(status, json);

                    if (status === 200) {
                        reload();
                    } else {
                        alert('Error ' + json.error);
                    }
                }

                async function amoled() {
                    const checkbox = document.querySelector('#amoled');

                    const response = await fetch(`/api/users/experiments/amoled`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ enabled: checkbox.checked })
                    });
                    const status = await response.status;
                    const json = await response.json();
                    console.log(status, json);

                    if (status === 200) {
                        reload();
                    } else {
                        alert('Error ' + json.error);
                    }
                }

                function requestNotificationPermission() {
                    if (!("Notification" in window)) {
                        return false;
                    }

                    if (Notification.permission === 'granted') {
                        subscribe();
                    } else if (Notification.permission !== 'denied') {
                        Notification.requestPermission().then((result) => {
                            if (result === 'granted') {
                                subscribe();
                            }
                        });
                    } else if (Notification.permission === 'denied') {
                        alert("Notification permission denied. Please allow notifications in settings.")
                    }
                }


                function subscribe() {
                    if ('serviceWorker' in navigator) {
                        navigator.serviceWorker.ready.then(async function (reg) {

                            const response = await fetch('/api/push/vapidPublicKey');
                            const vapidPublicKey = await response.text();
                            const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);

                            reg.pushManager.subscribe({
                                userVisibleOnly: true,
                                applicationServerKey: convertedVapidKey
                            }).then(async (subscription) => {
                                const result = await fetch('/api/push/register', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        subscription: subscription
                                    })
                                });
                            });

                            alert('Notifications enabled');
                        });
                    }
                }

                function unsubscribe() {
                    if ('serviceWorker' in navigator) {
                        navigator.serviceWorker.ready.then(async (reg) => {
                            reg.pushManager.getSubscription().then(pushSub => {
                                pushSub.unsubscribe();
                            })
                        })
                    }
                }

                function urlBase64ToUint8Array(base64String) {
                    var padding = '='.repeat((4 - base64String.length % 4) % 4);
                    var base64 = (base64String + padding)
                        .replace(/\-/g, '+')
                        .replace(/_/g, '/');

                    var rawData = window.atob(base64);
                    var outputArray = new Uint8Array(rawData.length);

                    for (var i = 0; i < rawData.length; ++i) {
                        outputArray[i] = rawData.charCodeAt(i);
                    }
                    return outputArray;
                }

                // function randomNotification() {
                //     const notifTitle = 'Notification';
                //     const options = {
                //         body: 'This is a notification lolz',
                //         icon: '/public/img/icon.png'
                //     };
                //     new Notification(notifTitle, options);
                //     setTimeout(randomNotification, 30000);
                // }


                function logOut() {
                    redirect('/app/logout');
                }
            </script>
</body>

</html>